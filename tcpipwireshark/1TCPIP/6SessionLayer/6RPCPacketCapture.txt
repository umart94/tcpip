DSSETUP REQUEST -> RPC CALL
TCP MESSAGE -> NetBIOS Session Message

the DCE/RPC is the Remote Procedure Call is the session of this packet capture.

Distributed Computing Environment / Remote Procedure Call (DCE/RPC) Request, Fragment: Single, FragLen: 26, Call: 30, Ctx: 0, [Resp: #8]
    Version: 5
    Version (minor): 0
    Packet type: Request (0)
    Packet Flags: 0x03
        0... .... = Object: Not set
        .0.. .... = Maybe: Not set
        ..0. .... = Did Not Execute: Not set
        ...0 .... = Multiplex: Not set
        .... 0... = Reserved: Not set
        .... .0.. = Cancel Pending: Not set
        .... ..1. = Last Frag: Set
        .... ...1 = First Frag: Set
    Data Representation: 10000000 (Order: Little-endian, Char: ASCII, Float: IEEE)
        Byte order: Little-endian (1)
        Character: ASCII (0)
        Floating-point: IEEE (0)
    Frag Length: 26
    Auth Length: 0
    Call ID: 30
    Alloc hint: 10
    Context ID: 0
    Opnum: 0
    [Response in frame: 8]
    Complete stub data (2 bytes)
        Payload stub data (2 bytes)


we establish this connection , in order to transfer messages back and forth from the client to server.

Version 5
packet type request

flags of last fragment and first fragment set ( there is only 1 message)

both endpoints know what the data looks like

-------------------
Data Representation: 10000000 (Order: Little-endian, Char: ASCII, Float: IEEE)
        Byte order: Little-endian (1)
        Character: ASCII (0)
        Floating-point: IEEE (0)
    Frag Length: 26
    Auth Length: 0
    Call ID: 30
    Alloc hint: 10
    Context ID: 0
    Opnum: 0
    [Response in frame: 8]
    Complete stub data (2 bytes)
        Payload stub data (2 bytes)

----------------------------
10000000 (Order: Little-endian, Char: ASCII, Float: IEEE)
Little-endian means that Least Significant Byte is going to be transmitted first.
in Big-endian the most significant Byte gets transmitted first.

so we are transmitting smallest bytes first, from right to left. ( in this case)

--------------------------------
Response
Distributed Computing Environment / Remote Procedure Call (DCE/RPC) Response, Fragment: Single, FragLen: 104, Call: 30, Ctx: 0, [Req: #7]
    Version: 5
    Version (minor): 0
    Packet type: Response (2)
    Packet Flags: 0x03
        0... .... = Object: Not set
        .0.. .... = Maybe: Not set
        ..0. .... = Did Not Execute: Not set
        ...0 .... = Multiplex: Not set
        .... 0... = Reserved: Not set
        .... .0.. = Cancel Pending: Not set
        .... ..1. = Last Frag: Set
        .... ...1 = First Frag: Set
    Data Representation: 10000000 (Order: Little-endian, Char: ASCII, Float: IEEE)
        Byte order: Little-endian (1)
        Character: ASCII (0)
        Floating-point: IEEE (0)
    Frag Length: 104
    Auth Length: 0
    Call ID: 30
    Alloc hint: 80
    Context ID: 0
    Cancel count: 0
    [Opnum: 0]
    [Request in frame: 7]
    [Time from request: 0.002138000 seconds]
    Complete stub data (80 bytes)
        Payload stub data (80 bytes)
---------------------------

Response sent

Active Directory Setup, DsRoleGetPrimaryDomainInformation
    Operation: DsRoleGetPrimaryDomainInformation (0)
    [Request in frame: 7]
    Pointer to Info (dssetup_DsRoleInfo)
        Referent ID: 0x000be8a8
        dssetup_DsRoleInfo
            Info
            Basic
                Role: DS_ROLE_STANDALONE_WORKSTATION (0)
                Flags: 0x00000000: (No values set)
                    .... .... .... .... .... .... .... ...0 = DS ROLE PRIMARY DS RUNNING: DS_ROLE_PRIMARY_DS_RUNNING is NOT SET
                    .... .... .... .... .... .... .... ..0. = DS ROLE PRIMARY DS MIXED MODE: DS_ROLE_PRIMARY_DS_MIXED_MODE is NOT SET
                    .... .... .... .... .... .... .... .0.. = DS ROLE UPGRADE IN PROGRESS: DS_ROLE_UPGRADE_IN_PROGRESS is NOT SET
                    .... ...0 .... .... .... .... .... .... = DS ROLE PRIMARY DOMAIN GUID PRESENT: DS_ROLE_PRIMARY_DOMAIN_GUID_PRESENT is NOT SET
                Pointer to Domain (uint16): WORKGROUP
                    Referent ID: 0x000c0130
                    Max Count: 10
                    Offset: 0
                    Actual Count: 10
                    Domain: WORKGROUP
                NULL Pointer: Pointer to Dns Domain (uint16)
                NULL Pointer: Pointer to Forest (uint16)
                Domain Guid: 00000000-0000-0000-0000-000000000000
    Windows Error: WERR_OK (0x00000000)


-------------------
In computer networking, Server Message Block (SMB), one version of which was also known as Common Internet File System (CIFS /sÉªfs/),[1][2] is a network communication protocol[3] for providing shared access to files, printers, and serial ports between nodes on a network. It also provides an authenticated inter-process communication mechanism. Most usage of SMB involves computers running Microsoft Windows, where it was known as "Microsoft Windows Network" before the introduction of Active Directory. Corresponding Windows services are LAN Manager Server for the server component, and LAN Manager Workstation for the client component.

Server Message Block is foundation of windows networking , communication b/w domain controllers and clients and active directory servers and file and printer sharing.

---------
Other RPC Analogues.

Notable RPC implementations and analogues include:

Language-specific
Java's Java Remote Method Invocation (Java RMI) API provides similar functionality to standard Unix RPC methods.
Go provides package rpc for implementing RPC, with support for asynchronous calls.
Modula-3's network objects, which were the basis for Java's RMI[10]
RPyC implements RPC mechanisms in Python, with support for asynchronous calls.
Distributed Ruby (DRb) allows Ruby programs to communicate with each other on the same machine or over a network. DRb uses remote method invocation (RMI) to pass commands and data between processes.
Erlang is process oriented and natively supports distribution and RPCs via message passing between nodes and local processes alike.
Elixir builds on top of the Erlang VM and allows process communication (Elixir/Erlang processes, not OS processes) of the same network out-of-the-box via Agents and message passing.
Application-specific
Action Message Format (AMF) allows Adobe Flex applications to communicate with back-ends or other applications that support AMF.
Remote Function Call is the standard SAP interface for communication between SAP systems. RFC calls a function to be executed in a remote system.
General
NFS (Network File System) is one of the most prominent users of RPC
Open Network Computing Remote Procedure Call, by Sun Microsystems
D-Bus open source IPC program provides similar function to CORBA.
SORCER provides the API and exertion-oriented language (EOL) for a federated method invocation
XML-RPC is an RPC protocol that uses XML to encode its calls and HTTP as a transport mechanism.
JSON-RPC is an RPC protocol that uses JSON-encoded messages
JSON-WSP is an RPC protocol that uses JSON-encoded messages
SOAP is a successor of XML-RPC and also uses XML to encode its HTTP-based calls.
ZeroC's Internet Communications Engine (Ice) distributed computing platform.
Etch framework for building network services.
Apache Thrift protocol and framework.
CORBA provides remote procedure invocation through an intermediate layer called the object request broker.
Libevent provides a framework for creating RPC servers and clients.[11]
Windows Communication Foundation is an application programming interface in the .NET framework for building connected, service-oriented applications.
Microsoft .NET Remoting offers RPC facilities for distributed systems implemented on the Windows platform. It has been superseded by WCF.
The Microsoft DCOM uses MSRPC which is based on DCE/RPC
The Open Software Foundation DCE/RPC Distributed Computing Environment (also implemented by Microsoft).
Google Protocol Buffers (protobufs) package includes an interface definition language used for its RPC protocols[12] open sourced in 2015 as gRPC.[13]
WAMP combines RPC and Publish-Subscribe into a single, transport-agnostic protocol.
Google Web Toolkit uses an asynchronous RPC to communicate to the server service.[14]
Apache Avro provides RPC where client and server exchange schemas in the connection handshake and code generation is not required.
Embedded RPC is lightweight RPC implementation developed by NXP, targeting primary CortexM cores
KF Trusted Execution Environment uses proxy and objects marshaling to communicate objects across sandboxes
msgpack-rpc is a lightweight RPC implementation using MessagePack to serialize data. It is used in the text editor Neovim.


