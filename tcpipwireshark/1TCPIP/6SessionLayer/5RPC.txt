Remote Procedure Call Protocol

What is an RPC ?
In distributed computing, a remote procedure call (RPC) is when a computer program causes a procedure (subroutine) to execute in a different address space (commonly on another computer on a shared network), which is coded as if it were a normal (local) procedure call, without the programmer explicitly coding the details for the remote interaction. That is, the programmer writes essentially the same code whether the subroutine is local to the executing program, or remote. This is a form of client–server interaction (caller is client, executor is server), typically implemented via a request–response message-passing system. In the object-oriented programming paradigm, RPCs are represented by remote method invocation (RMI). The RPC model implies a level of location transparency, namely that calling procedures are largely the same whether they are local or remote, but usually they are not identical, so local calls can be distinguished from remote calls. Remote calls are usually orders of magnitude slower and less reliable than local calls, so distinguishing them is important.

RPCs are a form of inter-process communication (IPC), in that different processes have different address spaces: if on the same host machine, they have distinct virtual address spaces, even though the physical address space is the same; while if they are on different hosts, the physical address space is different. Many different (often incompatible) technologies have been used to implement the concept.


2 Systems
Client and Server
2 programs want to communicate

1 program runs on different architecture.

2 programs can communicate in ways that they cannot in other methods


1 program makes calls to another program to get some functionality that calling program does not have




Steps of RPC :

1. Client calls a stub function local to the calling program
2. puts the parameters in message, send message to remote system
3. remote system receives it , pulls message apart , pulls parameters apart , calls procedure on the server
with those parameters (supplied by client)

gets the reply message , sends it back to client.




Message passing
RPC is a request–response protocol. An RPC is initiated by the client, which sends a request message to a known remote server to execute a specified procedure with supplied parameters. The remote server sends a response to the client, and the application continues its process. While the server is processing the call, the client is blocked (it waits until the server has finished processing before resuming execution), unless the client sends an asynchronous request to the server, such as an XMLHttpRequest. There are many variations and subtleties in various implementations, resulting in a variety of different (incompatible) RPC protocols.

An important difference between remote procedure calls and local calls is that remote calls can fail because of unpredictable network problems. Also, callers generally must deal with such failures without knowing whether the remote procedure was actually invoked. Idempotent procedures (those that have no additional effects if called more than once) are easily handled, but enough difficulties remain that code to call remote procedures is often confined to carefully written low-level subsystems.







Sequence of events

1The client calls the client stub. The call is a local procedure call, with parameters pushed on to the stack in the normal way.

2The client stub packs the parameters into a message and makes a system call to send the message. Packing the parameters is called marshalling.

3The client's local operating system sends the message from the client machine to the server machine.

4The local operating system on the server machine passes the incoming packets to the server stub.

5The server stub unpacks the parameters from the message. Unpacking the parameters is called unmarshalling.

6Finally, the server stub calls the server procedure. The reply traces the same steps in the reverse direction.
